---------------------------------------------------------------------------------------------------------------------------------------------

EXP 1 : - create,desc,insert into select *from where ,and in, truncate,drop,alter,update;



create table exp1(empname varchar(12),empcode number(4),job varchar(4),sal number(7),comm number(10),deptno number(4));
desc exp1;
insert into exp1 values('avik',1000,'prof',25000,9876543210,0703,'M');
insert into exp1 values('avika',1001,'prof',50000,9876543211,0704,'F');
insert into exp1 values('avikan',1002,'prof',75000,9876543212,0705,'G');
insert into exp1 values('avikana',1003,'prof',100000,9876543213,0706,'L');

select empname,sal from exp1 where sal>=50000 and sal<=75000 ; // use of and
select  *from exp1 where deptno in(0703,0704,0705);             // use of or

truncate table exp1;                                            // clear data of table 
alter table exp1 add sex varchar(1);                            // add new column in table 
drop table exp1;                                                // delete a table complete
update exp1 set sal=(sal*0.5 + sal) where empcode>=1000 ;       // update table

select *from exp1;


---------------------------------------------------------------------------------------------------------------------------------------------- 

EXP 2  :-  

create table exp2( EMPNO NUMBER(4) NOT NULL, ENAME VARCHAR(10), JOB VARCHAR(9), MGR NUMBER(4), HIREDATE DATE, SAL NUMBER(7,2), COMM NUMBER(7,2), DEPTNO NUMBER(3), AGE NUMBER(3), ESAL NUMBER );
insert into exp2 values(1001, 'bheem' , 'developer' , 7902, '11/feb/2018' ,1560, 26.87, 20 ,24, 2000 );
insert into exp2 values(1002, 'kalia' , 'manager' , 7902, '16/oct/2016' ,2290, 66.34, 10 ,23, 3000 );
insert into exp2 values(1003, 'indra' , 'stalesman' , 7578, '18/jan/2016' ,3250, 100, 20 ,21, 3500 );
insert into exp2 values(1004, 'sonu' , 'manager' , 7566, '21/mar/2014' ,6350, 92, 15 ,26, 3500 );
insert into exp2 values(1005, 'monu' , 'manager' , 7789, '28/jun/2013' ,8450, 88, 10 ,28, 3500 );
insert into exp2 values(1006, 'dholu' , 'developer' , 7578, '08/jul/2019' ,4250, 115, 20 ,24, 3500 );
insert into exp2 values(1007, 'bholu' , 'designer' , 7566, '25/mar/2018' ,4000, 112.53, 25 ,23, 4000 );
insert into exp2 values(1008, 'chutki', 'analyst' , 7789, '31/aug/2020' ,3500, 76.89, 10 ,20, 3500 );

desc exp2;
select min(sal) as "minimum salary ",max(sal) as "maximum salary",avg(sal) as "Average salary" from exp1;		// select as 
select max(sal) - min(sal) as "Difference between max and min slaary" from exp1;					// diff of max and min
select ename as "employee",sal as "salary" from exp2 where sal > (select min(sal) from exp2) and job like 'd%';		// name starts as m...
select job as "job",sum(sal) as "total salary spent" from exp2 group by job order by job;				// order by job asc or desc
select mgr as "manager", min(sal) as "minimum slary under manager" from exp2 group by mgr order by min(sal);		// same 	
select ename,sal from exp2 order by sal desc;										// order by sal desc

---------------------------------------------------------------------------------------------------------------------------------------------- 


EXP 3 : -    swap two number and find the area and perimeter of rectangele


DECLARE
a number  := 50;
b number  := 40;

BEGIN
DBMS_OUTPUT.PUT_LINE('original values : ');
DBMS_OUTPUT.PUT_LINE('a  b');
DBMS_OUTPUT.PUT_LINE(a || ' '|| b);

a := a+b;
b := a-b;
a := a-b;
DBMS_OUTPUT.PUT_LINE('original values : ');
DBMS_OUTPUT.PUT_LINE('a  b');
DBMS_OUTPUT.PUT_LINE(a || ' '|| b);
END;

++++++++++++++++++++++++++____________________________+++++++++++++++++++++++++++++++++++_________________________

create or replace procedure area_and_perimeter(l number,b number) is
BEGIN
DBMS_OUTPUT.PUT_LINE('area of rectangle :' || l*b);
DBMS_OUTPUT.PUT_LINE('perimeter of rectangle :' || 2*(l+b));
END;
/
BEGIN
area_and_perimeter(20,30);
END;


---------------------------------------------------------------------------------------------------------------------------------------------- 


EXP 2.2 : Write a program in PL/SQL to print the value of a variable inside and outside a loop using LOOP EXIT statement.

DECLARE
  n NUMBER :=0;
BEGIN
LOOP
    DBMS_OUTPUT.PUT_LINE ('The value of n inside the loop is:  '|| TO_CHAR(n));
    n := n +1;
IF n >5THEN
EXIT;
END IF;
END LOOP;
  DBMS_OUTPUT.PUT_LINE('The value of n outside the loop is: '|| TO_CHAR(n));
END;



******************* Write a program in PL/SQL to check whether a number is prime or not using goto statement with for loop. *****************

DECLARE
  msg  VARCHAR2(30);
  n  PLS_INTEGER :=83;
BEGIN
FOR i in 2..ROUND(SQRT(n))
LOOP
IF n MOD i =0THEN
      msg :=' is not a prime number';

END IF;
END LOOP;

  msg :=' is a prime number';

  DBMS_OUTPUT.PUT_LINE(TO_CHAR(n)|| msg);
END;


----------------------------------------------------------------------------------------------------------------------------------------------

EXP 3.2 : -   Design a package for HR department as admin to store the details of employees in an organization.



CREATE TABLE CUSTOMERS(  
   ID   INT NOT NULL,  
   NAME VARCHAR (20) NOT NULL,  
   AGE INT NOT NULL,  
   ADDRESS CHAR (25),  
   SALARY   DECIMAL (18, 2),         
   PRIMARY KEY (ID)  
); 
INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)  
VALUES (1, 'Ramesh', 32, 'Ahmedabad', 2000.00 );   

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)  
VALUES (2, 'Khilan', 25, 'Delhi', 1500.00 );   

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)  
VALUES (3, 'kaushik', 23, 'Kota', 2000.00 ); 

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)  
VALUES (4, 'Chaitali', 25, 'Mumbai', 6500.00 );  

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)  
VALUES (5, 'Hardik', 27, 'Bhopal', 8500.00 );   

INSERT INTO CUSTOMERS (ID,NAME,AGE,ADDRESS,SALARY)  
VALUES (6, 'Komal', 22, 'MP', 4500.00 );  
Select * from customers; 
CREATE OR REPLACE PACKAGE c_package AS  
   -- Adds a customer  
   PROCEDURE addCustomer(c_id   customers.id%type,     c_name customers.Name%type,     c_age  customers.age%type,     c_addr customers.address%type,   
   c_sal  customers.salary%type);  

   -- Removes a customer  
   PROCEDURE delCustomer(c_id  customers.id%TYPE);  
   --Lists all customers  
   PROCEDURE listCustomer;  

END c_package;  
/ 

CREATE OR REPLACE PACKAGE BODY c_package AS  
   PROCEDURE addCustomer(c_id  customers.id%type,  
      c_name customers.Name%type,        c_age  customers.age%type,        c_addr  customers.address%type,   
      c_sal   customers.salary%type)  
   IS  
   BEGIN  
      INSERT INTO customers (id,name,age,address,salary)  
         VALUES(c_id, c_name, c_age, c_addr, c_sal);  
   END addCustomer;  

   PROCEDURE delCustomer(c_id   customers.id%type) IS  
   BEGIN  
      DELETE FROM customers  
      WHERE id = c_id;  
   END delCustomer;   

   PROCEDURE listCustomer IS  
   CURSOR c_customers is  
      SELECT  name FROM customers;  
   TYPE c_list is TABLE OF customers.Name%type;  
   name_list c_list := c_list();  
   counter integer :=0;  
   BEGIN  
      FOR n IN c_customers LOOP        counter := counter +1;        name_list.extend;        name_list(counter) := n.name;  
      dbms_output.put_line('Customer(' ||counter|| ')'||name_list(counter));  
      END LOOP;  
   END listCustomer; 

END c_package;  
/ 

DECLARE  
   code customers.id%type:= 8;  BEGIN  
   c_package.addcustomer(7, 'Rajnish', 25, 'Chennai', 3500);     c_package.addcustomer(8, 'Subham', 32, 'Delhi', 7500);     c_package.listcustomer;     c_package.delcustomer(code);  
   c_package.listcustomer;  
END;  
/ 

